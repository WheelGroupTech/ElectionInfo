#-----------------------------------------------------------------------------
# process_tif_results_tapes.py
#
# Copyright (c) 2024 Daniel M. Teal
#
# License: MIT License
#
# Python script to process TIFF images of results tapes generated by
# ES&S DS200 ballot scanners.
#-----------------------------------------------------------------------------
"""process_tif_results_tapes.py""" # for pylint
# pylint: disable=line-too-long,unused-variable,too-many-branches
# pylint: disable=too-many-nested-blocks,too-many-statements
import os
import re
import shelve

from PIL import Image
import pytesseract


# Specify the database version for the results tapes data
RESULTS_TAPES_VERSION = 1

# We need to specify the location of the Tesseract-OCR binary for pytesseract
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

# We will disable Pillow maximum image size since results tapes TIF files can be very large
Image.MAX_IMAGE_PIXELS = None

# Specify the list of candidates we are checking the results tape for
CANDIDATES = ['Trump', 'Haley', 'Cruz', 'Biden', 'Allred',
              'Blacklock','Jones','Devine','Weems','Bland','Goldstein']

RESULTS_TAPES = []


#-----------------------------------------------------------------------------
# convert_to_int()
#
# This function converts the input string into an integer.  It returns 0
# if the input does not consist of digits
#-----------------------------------------------------------------------------
def convert_to_int(input_str):
    """Converts the input string into an integer"""
    if input_str.isdigit():
        return int(input_str)

    return 0


#-----------------------------------------------------------------------------
# analyze_tif_results_file()
#
# This function analyzes the provided TIF file of the DS200 results tape.
#-----------------------------------------------------------------------------
def analyze_tif_results_file(pathname):
    """Analyzes a DS200 results tape TIF file"""

    image = Image.open(pathname)

    results_info = {
        "Pathname": pathname,
        "Image Size": image.size,
        #"Image Height": image.height,
        #"Image Width": image.width,
        #"Image Format": image.format,
        #"Image Mode": image.mode,
        #"Image is Animated": getattr(image, "is_animated", False),
        #"Frames in Image": getattr(image, "n_frames", 1),
    }

    # Tesseract-OCR has internal limits on the size of images it can process.
    # Current limits are a signed 16bit integer or a maximum of 32,767 pixels
    # for height and/or width.  Crop the image into pieces since results tapes
    # are usually over 32,767 pixels in height.
    width = image.width
    height = image.height
    current = 0
    text = ""
    while current < height:
        delta = height - current
        delta = min(delta, 32000)

        # Crop the image for the current piece
        cropped_image = image.crop([0, current, width, current + delta])

        # Obtain the text from the crop
        cropped_text = pytesseract.image_to_string(cropped_image)
        text = text + cropped_text
        current = current + delta

    # The OCR text could contain the results from more than one DS200 if the
    # operator was swapping out the results sticks and printing out the results on
    # a single very long tape.

    # Analyze the OCR text
    report_has_serial_number = False
    for line in text.splitlines():
        line = line.strip()
        words = line.split(r':')

        # Look for the serial number and various count values
        if len(words) > 1:
            if re.search(r'Number', words[0]):
                results_info['Serial Number']= words[1].strip()
                report_has_serial_number = True

            elif re.search(r'Public Count', words[0]):
                results_info['Public Count']= convert_to_int(words[1].strip())

            elif re.search(r'ExpressVote Cards', words[0]):
                results_info['ExpressVote Cards']= convert_to_int(words[1].strip())

            elif re.search(r'Sheets Processed', words[0]):
                results_info['Sheets Processed']= convert_to_int(words[1].strip())

        else:

            # Search for the end of the report from a single DS200 scanner.
            if re.search(r'END OF REPORT', words[0]):
                print(results_info)

                # Append the current results and start with the next one
                RESULTS_TAPES.append(results_info)
                report_has_serial_number = False
                results_info = {
                    "Pathname": pathname,
                    "Image Size": image.size,
                }

            else:
                # Look for the candidate counts
                for candidate in CANDIDATES:
                    if re.search(candidate, line):
                        words = line.split()
                        if len(words) > 1:
                            results_info[candidate] = convert_to_int(words[-1])
                        else:
                            results_info[candidate] = 0

    # Print out the results information since OCR processing takes a while
    if report_has_serial_number:
        print(results_info)

        RESULTS_TAPES.append(results_info)


#-----------------------------------------------------------------------------
# analyze_files()
#
# This function analyzes all of the files in the specified directory and
# subdirectories.
#-----------------------------------------------------------------------------
def analyze_files(dirname):
    """Analyze files in the specified directory"""

    for dirpath, dirnames, filenames in os.walk(dirname):
        for filename in filenames:
            if re.search(r'.tif', filename, flags=re.IGNORECASE):

                # Create the pathname to the results tape file
                pathname = os.path.join(dirpath, filename)

                # Analyze the results tape file
                analyze_tif_results_file(pathname)


#-----------------------------------------------------------------------------
# main()
#-----------------------------------------------------------------------------
def main():
    """Main function"""

    # Analyze the files in the current directory and subdirectories
    analyze_files(r".")

    # Save the data for additional processing
    db = shelve.open('results_dbfile')
    db['Version'] = RESULTS_TAPES_VERSION
    db['results_tapes'] = RESULTS_TAPES
    db.close()


main()
